{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udcc8 Portfolio Optimisation \u2014 An Investor\u2019s Journey","text":"<p>\ud83d\udcac \u201cCompound interest is the eighth wonder of the world.\u201d \u2014 attributed to Albert Einstein</p> <p> </p>"},{"location":"#why-this-project-exists","title":"\ud83c\udf31 Why this project exists","text":"<p>This project didn\u2019t begin in a finance lab or on Wall Street. It started from watching a friend build something cool \u2014 a portfolio analysis tool \u2014 and thinking:</p> <p>\u201cMaybe it\u2019s time I tried building one too.\u201d</p> <p>I\u2019ve always been curious about investing and quant strategies, but this time I wanted to go deeper. Not just reading or paper-trading \u2014 but writing code, testing ideas, and learning by doing.</p> <p>This repo is my way of exploring portfolio optimisation, and improving both my coding skills \ud83e\udde0 and financial understanding \ud83d\udcb0 along the way.</p>"},{"location":"#what-youll-find-inside","title":"\ud83d\udce6 What you\u2019ll find inside","text":"<ol> <li>\ud83d\udee0\ufe0f Walk\u2011Through \u2014 a practical guide from setup to running your first backtest  </li> <li>\ud83d\udcca Results &amp; Charts \u2014 things like the Efficient Frontier, portfolio stats, and benchmark comparisons  </li> <li>\ud83d\udcda References \u2014 research papers, blog posts, and tools that helped along the way</li> </ol> <p>\ud83e\uddea Everything here is reproducible \u2014 no magic, just code.</p>"},{"location":"#a-quick-promise","title":"\ud83e\udd1d A quick promise","text":"<p>This project is written in plain English, with minimal jargon. If something\u2019s confusing or unclear, open an issue or send feedback \u2014 I\u2019ll happily improve it.</p>"},{"location":"#lets-get-started","title":"\ud83d\ude80 Let\u2019s get started","text":"<p>Fire up a notebook, run some numbers, and see how far a little curiosity and consistency can take us.</p> <p>Happy compounding! \u2615\ud83d\udcd8\ud83d\udcc8</p>"},{"location":"efficient-frontier/","title":"Efficient Frontier \u2014 Guide","text":"<p>\u201cFind the mix that thrills you without keeping you up at night.\u201d</p>"},{"location":"efficient-frontier/#1-what-on-earth-is-an-efficient-frontier","title":"1\u2002What on earth is an efficient frontier?","text":"<p>Picture every possible portfolio of your chosen assets on a two\u2011axis chart:</p> <ul> <li>X\u2011axis: annualised volatility (risk)  </li> <li>Y\u2011axis: expected annual return  </li> </ul> <p>Most dots live in the middle. The efficient frontier is the upper\u2011left edge of that cloud \u2014 the set of portfolios that deliver the highest return for a given level of risk (or, flipped around, the lowest risk for a chosen return). If your portfolio sits below that curve, you\u2019re either leaving money on the table or accepting more stress than necessary.</p>"},{"location":"efficient-frontier/#2-the-intuition-before-the-equations","title":"2\u2002The intuition before the equations","text":"<ol> <li>Diversify: mix assets that don\u2019t move in perfect lock\u2011step.  </li> <li>Risk\u2013reward trade\u2011off: extra risk can buy extra return, but not automatically.  </li> <li>Optimise: let math churn through millions of weight combinations and keep only the \u201cbest so far\u201d.</li> </ol> <p>That\u2019s the whole trick. No black magic required.</p>"},{"location":"efficient-frontier/#3-a-pinch-of-maths-kept-gentle","title":"3\u2002A pinch of maths (kept gentle)","text":"<p>For a portfolio with weights w, the expected return \\( \\mu_p \\) and volatility \\( \\sigma_p \\) are  </p> \\[ \\mu_p = \\mathbf{w}^\\top \\boldsymbol{\\mu}, \\qquad \\sigma_p = \\sqrt{\\mathbf{w}^\\top \\Sigma \\mathbf{w}} \\] <p>where  </p> <ul> <li>\\( \\boldsymbol{\\mu} \\) \u2014 vector of mean asset returns  </li> <li>\\( \\Sigma \\) \u2014 covariance matrix of those returns  </li> </ul> <p>To trace the frontier we repeatedly solve:</p> \\[ \\begin{aligned} \\min_{\\mathbf{w}}\\;&amp; \\mathbf{w}^\\top \\Sigma \\mathbf{w} \\\\ \\text{s.t. } &amp; \\mathbf{w}^\\top \\boldsymbol{\\mu} \\ge \\mu_{\\text{target}} \\\\              &amp; \\mathbf{1}^\\top \\mathbf{w} = 1,\\; \\mathbf{w} \\ge 0 \\end{aligned} \\] <p>(Here we forbid short\u2011selling. Remove \\( \\mathbf{w} \\ge 0 \\) if you\u2019re fine with shorts.)</p>"},{"location":"efficient-frontier/#4-doing-it-in-code-five-lines-promise","title":"4\u2002Doing it in code (five lines, promise)","text":"<pre><code>ef_returns, ef_vols = construct_efficient_frontier(\n    returns=my_returns,      # DataFrame of daily % returns\n    tickers=my_tickers,\n    num_points=100\n)\n\nPortfolioPlotter.plot_efficient_frontier(\n    port_vols, port_returns, sharpe,\n    ef_vols, ef_returns, max_idx\n)\n</code></pre> <p><code>construct_efficient_frontier</code> loops over 100 target returns, feeds each optimisation to cvxpy, and stores the resulting risks. <code>plot_efficient_frontier</code> colours random portfolios by Sharpe ratio so you can spot the sweet spot instantly.</p>"},{"location":"efficient-frontier/#5-how-to-read-the-picture","title":"5\u2002How to read the picture","text":"<ul> <li>Black line: efficient frontier  </li> <li>Red dot: portfolio with the highest Sharpe ratio among the random samples  </li> <li>Sea of dots: random portfolios \u2014 most are, frankly, mediocre  </li> </ul> <p>Slide leftwards until lowering volatility starts to shave more return than you\u2019re willing to lose. That\u2019s usually your \u201chappy place\u201d.</p>"},{"location":"efficient-frontier/#6-quick-checklist","title":"6\u2002Quick checklist","text":"<ul> <li>[ ] Use at least three years of daily data (more is better).  </li> <li>[ ] Annualise returns and volatilities (*\u00a0252) consistently.  </li> <li>[ ] Inspect the covariance matrix for weird outliers.  </li> <li>[ ] Decide on constraints (no shorts? max weight per asset?).  </li> <li>[ ] Run the backtest after fixing weights; don\u2019t peek at the future.</li> </ul>"},{"location":"efficient-frontier/#further-reading","title":"Further reading","text":"<ul> <li>H.\u00a0Markowitz \u2014 Portfolio Selection (1952)  </li> <li>Grinold &amp;\u00a0Kahn \u2014 Active Portfolio Management </li> <li>Quantocracy blog posts on efficient\u2011frontier visualisations  </li> </ul> <p>(This guide is for educational purposes only \u2014 not investment advice.)</p>"},{"location":"portfolio-opt/","title":"Portfolio\u2011Opt \u2014 Optimise, Backtest, Repeat \ud83d\ude80","text":"<p>\u201cIn the short run the market is a voting machine, but in the long run it is a weighing machine.\u201d \u2014 Benjamin\u202fGraham</p> <p>Remember those 1\u202fa.m. Excel sessions, pasting tickers and promising yourself this time you\u2019d keep it neat? Portfolio\u2011Opt turns that spreadsheet pain into a few lines of Python. No gigantic notebooks, no 300\u2011line boilerplate\u2014just a focused toolkit for running honest\u2011to\u2011goodness portfolio experiments.</p>"},{"location":"portfolio-opt/#what-makes-it-useful","title":"What Makes It Useful?","text":"<ul> <li>Sharpe\u2011hunting \u2013 samples thousands of random portfolios each rebalance period and keeps the one with the best risk\u2011adjusted return.  </li> <li>Visual sanity checks \u2013 Efficient Frontier, equity curve, drawdown, benchmark overlay\u2026 all rendered in PNGs ready for your slide deck.  </li> <li>Zero\u2011friction workflow \u2013 install, run, read the CSVs, repeat. Works with any liquid tickers you throw at it.</li> </ul> <p>If you want the full feature list, flag explanations, or project layout, jump to the main README. This page keeps things high\u2011level and narrative so the docs don\u2019t feel like d\u00e9j\u00e0 vu.</p>"},{"location":"portfolio-opt/#installation","title":"Installation","text":"<pre><code>pip install portfolio-opt          # or 'poetry add portfolio-opt'\n</code></pre> <p>Python\u00a0\u2265\u202f3.9 and an internet connection for price data\u2014that\u2019s the entire setup.</p>"},{"location":"portfolio-opt/#fiveminute-tour","title":"Five\u2011Minute Tour","text":"<pre><code># 1) Choose a basket of stocks\nportfolio-opt --tickers AAPL MSFT NVDA META AMZN\n\n# 2) Pick a rhythm (default is yearly \u201cYE\u201d)\nportfolio-opt --rebalance 6M     # Semi\u2011annual\nportfolio-opt --rebalance Q      # Quarterly\n\n# 3) Open the PNGs &amp; CSVs\nopen reports/equity_and_drawdown_plot.png\n</code></pre> <p>You\u2019ll see:</p> Folder What\u2019s inside <code>reports/</code> Efficient frontier, equity vs. SPY, drawdown, allocation plots <code>exports/</code> CSVs for backtest summary, annual stats, yearly weights <p>Need more knobs (risk\u2011free rate, benchmark, random seed, etc.)? Check the CLI table in the README.</p>"},{"location":"portfolio-opt/#use-it-like-a-library","title":"Use It Like a Library","text":"<pre><code>from portfolio_opt.main import run_annual_rebalanced_backtest\n\nrun_annual_rebalanced_backtest(\n    tickers=[\"AAPL\", \"MSFT\", \"NVDA\"],\n    start_date=\"2020-01-01\",\n    end_date=\"2024-12-31\",\n    rebalance_freq=\"6M\",          # A / 6M / Q / 3M\n)\n</code></pre> <p>Same outputs, no shell required.</p>"},{"location":"portfolio-opt/#reading-the-numbers","title":"Reading the Numbers","text":"<ul> <li>Backtest Summary \u2013 total return, CAGR, volatility, Sharpe, max drawdown, CVaR (stdout).  </li> <li>Annual Summary \u2013 one row per period (<code>exports/annual_summary.csv</code>).  </li> <li>Annual Weights \u2013 how allocation shifts over time (<code>exports/annual_weights.csv</code>).  </li> <li>Margin Plot \u2013 Herfindahl concentration score per year.</li> </ul>"},{"location":"portfolio-opt/#tips-tricks-caveats","title":"Tips, Tricks &amp; Caveats","text":"<ul> <li>Swap the random Dirichlet draw for your own factor ranking to turn it into a factor model.  </li> <li>Hook the weight CSV into a broker API for live trading\u2014the backtester is state\u2011agnostic.  </li> <li>Long\u2011only, daily bars for now. Intraday and shorting are future projects.  </li> <li>Sampling 100\u202fk portfolios on a 15\u2011year window is CPU\u2011bound\u2014brew coffee first.</li> </ul>"},{"location":"portfolio-opt/#license-credits","title":"License &amp; Credits","text":"<p>MIT license. Fork it, break it, improve it\u2014just drop a \u2b50 if it saves you time.</p> <p>Made with midnight coffee in Bangkok. Happy compounding! \u2615</p>"},{"location":"references/","title":"\ud83d\udcda References \u2014 research papers, blog posts, and tools that helped along the way","text":"<p>A quick thank\u2011you note to the thinkers and tinkers whose work made this little project possible. If you spot something worth adding (or a link that\u2019s gone stale), drop an issue or open a PR.</p>"},{"location":"references/#academic-papers","title":"Academic Papers","text":"<ul> <li>Harry Markowitz (1952) \u2013 \u201cPortfolio Selection,\u201d The Journal of Finance.  The paper that put the Efficient Frontier on the map.  </li> <li>William F. Sharpe (1994) \u2013 \u201cThe Sharpe Ratio,\u201d The Journal of Portfolio Management.  Our yard\u2011stick for risk\u2011adjusted returns.  </li> <li>Eugene F. Fama &amp; Kenneth R. French (1993) \u2013 \u201cCommon Risk Factors in the Returns on Stocks and Bonds,\u201d Journal of Financial Economics.  A factor lens that still shapes today\u2019s screening models.</li> </ul>"},{"location":"references/#practitioner-blog-posts","title":"Practitioner &amp; Blog Posts","text":"<ul> <li>AQR Capital Management \u2013 \u201cMyth\u2011Busting with the Efficient Frontier\u201d (2018).  Clear prose on why volatility alone isn\u2019t the boogeyman.  </li> <li>QuantConnect Blog \u2013 \u201cBuilding a Risk\u2011Targeted Portfolio with CVaR\u201d (2021).  Sparked the CVaR angle in our back\u2011tester.  </li> <li>Corey Hoffstein, Newfound Research \u2013 \u201cUnderstanding the Risk of Risk Parity\u201d (2016).  Guided the margin\u2011per\u2011year concentration check.</li> </ul>"},{"location":"references/#tools-libraries","title":"Tools &amp; Libraries","text":"Tool Why it mattered VectorBT Event\u2011driven back\u2011testing that kept the feedback loop snappy. CVXPY Convex optimisation without the headache. Pandas &amp; NumPy Bread\u2011and\u2011butter for data wrangling. Matplotlib Old\u2011school visuals that just work."},{"location":"references/#honorable-mentions","title":"Honorable Mentions","text":"<ul> <li>Yahoo Finance API \u2013 Free data that didn\u2019t bail at 3\u202fa.m. test runs.  </li> <li>Jupyter Notebooks \u2013 Where half the ideas were born (and promptly broken).  </li> <li>Figma \u2013 Quick mock\u2011ups so non\u2011quants could \u201csee\u201d the numbers before they existed.</li> </ul>"},{"location":"results/","title":"\ud83d\udcca Results &amp; Charts","text":"<p>This section highlights the key outcomes from the portfolio optimisation process \u2014 visual insights, performance summaries, and benchmark comparisons. All charts and tables are reproducible from the scripts in this repository.</p>"},{"location":"results/#efficient-frontier-annual","title":"\ud83e\udded Efficient Frontier (Annual)","text":"<p>For each year, we generated 10,000 random portfolios and computed their expected return, volatility, and Sharpe ratio. The portfolio with the highest Sharpe ratio was selected as the optimal allocation.</p> <p>\ud83d\udcc1 Output: <code>reports/efficient_frontier/efficient_frontier_&lt;year&gt;.png</code></p> <p></p>"},{"location":"results/#portfolio-equity-curve-drawdown","title":"\ud83d\udcb9 Portfolio Equity Curve &amp; Drawdown","text":"<p>This chart shows the portfolio value over time, along with its drawdown. It helps visualize periods of growth and decline, and identify the severity of losses.</p> <p>\ud83d\udcc1 Output: <code>reports/equity_and_drawdown_plot.png</code></p> <p></p>"},{"location":"results/#portfolio-vs-benchmark-spy","title":"\ud83d\udcc9 Portfolio vs Benchmark (SPY)","text":"<p>A normalized comparison of the portfolio and SPY index since 2019. This chart shows how the strategy performed relative to the market benchmark.</p> <p>\ud83d\udcc1 Output: <code>reports/equity_vs_benchmark_plot.png</code></p> <p></p>"},{"location":"results/#portfolio-allocation-margin","title":"\ud83e\uddee Portfolio Allocation &amp; Margin","text":"<p>Two charts illustrate how the allocation to each stock changes yearly, and how concentrated the portfolio is (based on the Herfindahl index of squared weights).</p> <p>\ud83d\udcc1 Outputs: - <code>reports/portfolio_allocation_per_year.png</code> - <code>reports/portfolio_margin_per_year.png</code></p> <p></p> <p></p>"},{"location":"results/#summary-statistics","title":"\ud83d\udcd1 Summary Statistics","text":"<p>Exported CSV files contain summary statistics at the full portfolio level, per year, and for the SPY benchmark.</p> <p>\ud83d\udcc1 Files: - <code>exports/full_backtest_summary.csv</code> - <code>exports/annual_summary.csv</code> - <code>exports/benchmark_summary.csv</code> - <code>exports/annual_weights.csv</code></p> <p>\ud83d\udce5 Download full_backtest_summary.csv \ud83d\udce5 Download annual_summary.csv \ud83d\udce5 Download benchmark_summary.csv \ud83d\udce5 Download annual_weights.csv</p>"},{"location":"walk-through/","title":"\ud83d\udcd8 Portfolio Optimisation \u2014 Walk\u2011Through","text":"<p>Build, test and understand a simple stock portfolio in Python.</p>"},{"location":"walk-through/#table-of-contents","title":"Table of Contents","text":"<ul> <li>\ud83d\udcd8 Portfolio Optimisation \u2014 Walk\u2011Through</li> <li>Table of Contents  \u00a0\u00a0</li> <li>\ud83d\udc4b Welcome</li> <li>\ud83d\udee0\ufe0f What We\u2019re Building</li> <li>\ud83e\uddf0 Tools in the Toolbox</li> <li>\u2699\ufe0f How the Strategy Works</li> <li>\ud83e\uddee Key Equations</li> <li>\ud83e\uddf5 The Code \u2014 Step by Step</li> <li>\ud83d\udca1 Code Nuggets</li> <li>\ud83d\udcca Results at a Glance</li> <li>\ud83d\ude80 Run It Yourself</li> </ul>"},{"location":"walk-through/#welcome","title":"\ud83d\udc4b Welcome","text":"<p>If you\u2019ve ever wondered how people pick a mix of stocks and test it on past data, this guide is for you. We\u2019ll start with ten well\u2011known companies and show \u2014 with code \u2014 how to: choose a mix of stocks each year, test it on past data, and compare the outcome to the S&amp;P\u202f500 ETF (SPY). No PhD or heavy maths required \u2014 just curiosity and some Python.</p>"},{"location":"walk-through/#what-were-building","title":"\ud83d\udee0\ufe0f What We\u2019re Building","text":"<ul> <li>Goal: Grow money over the long run while minimizing wild swings.  </li> <li>Universe: Ten large\u2011cap US stocks (Apple, Microsoft, Amazon, etc.).  </li> <li>Tactic: Every 1Y / 6M / 3M, find the weights that gave the best risk\u2011adjusted return (Sharpe Ratio) over the past period, then hold those weights for the next.  </li> <li>Benchmark: SPY, the go\u2011to yard\u2011stick for US equities.</li> </ul>"},{"location":"walk-through/#tools-in-the-toolbox","title":"\ud83e\uddf0 Tools in the Toolbox","text":"Tool Why we use it VectorBT Quickly downloads price data from Yahoo Finance. NumPy / Pandas Crunch numbers and wrangle data frames. CVXPY Solves the optimisation problem that draws the efficient frontier. Matplotlib Plots equity curves and other charts. <p>Everything runs on plain Python\u202f3.10+; nothing fancy to install.</p>"},{"location":"walk-through/#how-the-strategy-works","title":"\u2699\ufe0f How the Strategy Works","text":"<p>Picture a recipe book. Each recipe is a set of weights that tells us how much Apple, Microsoft, Amazon \u2026 to put in the pot. We want the recipe that offered the tastiest return per unit of risk last year.</p> <p>Risk here is day\u2011to\u2011day ups and downs (volatility). The taste\u2011test score is the Sharpe Ratio:</p> \\[ \\text{Sharpe} = \\frac{\\text{Average daily return} \\times 252 - r_f}{\\text{Daily volatility} \\times \\sqrt{252}} \\] <p>\u2026where \\(r_f\\) is the tiny \u201cfree\u201d return you could have earned in cash (we use 3\u202f%).</p> <p>Once we have that recipe, we cook with it for a year, then repeat the process.</p>"},{"location":"walk-through/#key-equations","title":"\ud83e\uddee Key Equations","text":"<p>Here are the handful of formulas you will see over and over in portfolio theory. MathJax is enabled, so feel free to copy\u2011paste these into your own notes.  </p> \\[   \\mu_p = \\mathbf{w}^\\top \\boldsymbol{\\mu} \\] \\[   \\sigma_p = \\sqrt{\\mathbf{w}^\\top \\Sigma \\,\\mathbf{w}} \\] \\[   \\min_{\\mathbf{w}} \\;\\sigma_p   \\quad\\text{s.t.}\\quad   \\begin{cases}     \\mathbf{w}^\\top \\boldsymbol{\\mu} \\;\\ge\\; \\mu_{\\text{target}} \\\\     \\sum_{i=1}^{N} w_i = 1 \\\\     w_i \\ge 0 \\quad \\forall i   \\end{cases} \\] \\[   \\text{CVaR}_{95\\%} = -\\frac{1}{N_{tail}}\\sum_{i \\in \\text{worst }5\\%} r_i \\] <p>$$   \\sum_{i=1}^{N} w_i^2 \\xrightarrow{} 0   \\quad\\text{implies a well\u2011diversified portfolio} $$ (That last one is the Herfindahl index we plot each year.)</p>"},{"location":"walk-through/#the-code-step-by-step","title":"\ud83e\uddf5 The Code \u2014 Step by Step","text":"flowchart TD     A[main.py] --&gt;|Download| B[Daily Prices]     B --&gt; C[Daily % Returns]     C --&gt;|Sample 10\u202f000 random recipes| D[Sharpe Scores]     D --&gt;|Pick the best| E[Yearly Weights]     C --&gt;|CVXPY loop| F[Efficient Frontier]     E --&gt; G[PortfolioBacktester]     G --&gt; H[Equity Curve]     H --&gt; I[Plot &amp; Save Charts]     F --&gt; I     G --&gt; J[Write CSV Summaries]     style A fill:#e8f4ff,stroke:#1c6fd3     style I fill:#fff7e6,stroke:#c99400 <ol> <li>Get the data from Yahoo Finance.  </li> <li>Generate 10\u202f000 random weight vectors with a Dirichlet distribution.  </li> <li>Score each weight set by its Sharpe Ratio.  </li> <li>Keep the top\u2011scoring weights.  </li> <li>Test those weights on the actual returns for that year.  </li> <li>Stitch together the yearly equity curves to form one long curve.  </li> <li>Compare that curve with SPY and save everything (plots + CSV) in the <code>reports/</code> and <code>exports/</code> folders.</li> </ol>"},{"location":"walk-through/#code-nuggets","title":"\ud83d\udca1 Code Nuggets","text":"<p>Sometimes you just want to see one self\u2011contained example. The snippet below shows how we solve one point on the Efficient Frontier.  </p> <pre><code>import cvxpy as cp\n\n# mus and cov are taken from historical returns\nw = cp.Variable(len(tickers))\nrisk = cp.quad_form(w, cov)\n\nprob = cp.Problem(\n    cp.Minimize(risk),\n    [\n        cp.sum(w) == 1,      # fully invested\n        w &gt;= 0,              # long\u2011only\n        mus @ w &gt;= target    # hit desired return\n    ]\n)\nprob.solve()\n\nprint(\"Weights:\", w.value.round(4))\nprint(\"Portfolio \u03c3:\", (risk.value ** 0.5).round(4))\n</code></pre> <p>\ud83d\udc49 Tip: swap <code>cp.Minimize(risk)</code> for <code>cp.Maximize(sharpe)</code> if you feel adventurous. (Just remember to define the Sharpe expression first!)</p>"},{"location":"walk-through/#results-at-a-glance","title":"\ud83d\udcca Results at a Glance","text":"<p>After running <code>main.py</code> you\u2019ll find:</p> <ul> <li>Equity &amp; Drawdown Plot \u2013 see growth and the worst dips.  </li> <li>Efficient Frontier Plots \u2013 one fancy curve per year.  </li> <li>CSV summaries \u2013 handy for spreadsheets or deeper analysis.</li> </ul> <p>(Files land in <code>reports/</code> and <code>exports/</code>. Feel free to open them and poke around.)</p>"},{"location":"walk-through/#run-it-yourself","title":"\ud83d\ude80 Run It Yourself","text":"<pre><code># 1. Grab the code.\ngit clone https://github.com/your_user/portfolio-opt.git\ncd portfolio-opt\n\n# 2. Install requirements (about 1\u20132\u202fmin).\npoetry install  # or: pip install -r requirements.txt\n\n# 3. Launch the pipeline.\nportfolio-opt --tickers AAPL MSFT NVDA --start-date 2020-01-01 --end-date 2024-12-31 --rebalance YE\n</code></pre> <p>Tinker Time Open <code>main.py</code> to:</p> <ul> <li>swap in different tickers.  </li> <li>widen the date range.  </li> <li>change the number of random portfolios (<code>n_ports</code>).</li> </ul> <p>Then hit Run again and see how the story changes.</p> <p>Happy exploring, and may your portfolios be ever in your favour! \ud83c\udf89</p>"}]}